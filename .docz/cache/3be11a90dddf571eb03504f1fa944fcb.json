{"remainingRequest":"/Users/eriktrautman/Documents/docs/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/eriktrautman/Documents/docs/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/eriktrautman/Documents/docs/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"babelrc\":false,\"cacheCompression\":true,\"compact\":true}!/Users/eriktrautman/Documents/docs/src/tutorials/multiplayergame.mdx","dependencies":[{"path":"/Users/eriktrautman/Documents/docs/src/tutorials/multiplayergame.mdx","mtime":1549427418869},{"path":"/Users/eriktrautman/Documents/docs/node_modules/cache-loader/dist/cjs.js","mtime":1548721029371},{"path":"/Users/eriktrautman/Documents/docs/node_modules/babel-loader/lib/index.js","mtime":1548721029154}],"contextDependencies":[],"result":["function _typeof(obj){if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)===\"object\"||typeof call===\"function\")){return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}import React from'react';import{MDXTag}from'@mdx-js/tag';var layoutProps={};var MDXContent=/*#__PURE__*/function(_React$Component){_inherits(MDXContent,_React$Component);function MDXContent(props){var _this;_classCallCheck(this,MDXContent);_this=_possibleConstructorReturn(this,_getPrototypeOf(MDXContent).call(this,props));_this.layout=null;return _this;}_createClass(MDXContent,[{key:\"render\",value:function render(){var _this$props=this.props,components=_this$props.components,props=_objectWithoutProperties(_this$props,[\"components\"]);return React.createElement(MDXTag,{name:\"wrapper\",components:components},React.createElement(MDXTag,{name:\"h1\",components:components,props:{\"id\":\"writing-a-multiplayer-game-with-shared-world-state\"}},\"Writing a multiplayer game with shared world state.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"A multiplayer game is typically characterized by taking place within a single world that all players can affect. Let's build one!\"),React.createElement(MDXTag,{name:\"p\",components:components},\"This is commonly implemented by setting up a coordinate system which represents locations within the world.  A simple key-value mapping stores the state of the world at a particular coordinate.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"In this tutorial, we will write a very simple game with a shared world state. The world is represented as a square playing field and the only property that is available at each location is its 'color'. Some of you may recognize this as \\\"place\\\", which made its way around the Internet a while ago.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"See and play with a working solution here: \",React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"p\",props:{\"href\":\"https://studio.nearprotocol.com/?f=fnpeopb37&quickstart\"}},\"https://studio.nearprotocol.com/?f=fnpeopb37&quickstart\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"step-1----start-a-new-fiddle-in-nearstudio\"}},\"Step 1 -- Start a new fiddle in NEARstudio\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Go to \",React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"p\",props:{\"href\":\"https://studio.nearprotocol.com/\"}},\"https://studio.nearprotocol.com/\"),\" and start a new project (fiddle) by selecting \\\"Token Smart Contract in AssemblyScript\\\" and click \\\"Create\\\".\"),React.createElement(MDXTag,{name:\"p\",components:components},React.createElement(MDXTag,{name:\"img\",components:components,parentName:\"p\",props:{\"src\":\"public/screenshots/multiplayergame/studio_choose_contract_modal.png\",\"alt\":\"Contract selection modal\",\"title\":\"Contract selection modal\"}})),React.createElement(MDXTag,{name:\"p\",components:components},\"This sample project has a token smart contract (i.e. code that runs on blockchain) and also some JavaScript tests that invoke smart contract functions.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"You can try running these tests right away to see the code interacting with the blockchain by clicking \\\"Test\\\". It should open a new window and show the test results using the standard Jasmine browser UI.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Also note that \",React.createElement(MDXTag,{name:\"strong\",components:components,parentName:\"p\"},\"we are not going to keep any of the code from this template\"),\", it's just there as a starting point.\"),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"step-2---write-a-smart-contract\"}},\"Step 2 - Write a smart contract\"),React.createElement(MDXTag,{name:\"p\",components:components},\"In this simple game, we need to create only two actions:\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"1. View the world state: `getCoords`\\n2. Make changes to the state at particular coordinates: `setCoords`\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"In a more complex game with a large world, it is optimal to avoid returning the state of the entire world at once.  Because our game is small and simple, we don't have to worry about this.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Navigate to \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"assembly/main.ts\"),\", and:\"),React.createElement(MDXTag,{name:\"ol\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Delete everything that is there.\"),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Implement the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"setCoords\"),\" and \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"getCoords\"),\" functions using the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"globalStorage\"),\" object's \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"setItem\"),\" and \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"getItem\"),\" functions:\")),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"// assembly/main.ts\\n\\nexport function setCoords(coords: string, value: string): void {\\n  globalStorage.setItem(coords, value);\\n}\\n\\nexport function getCoords(coords: string): string {\\n  return globalStorage.getItem(coords);\\n}\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"We also need a \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"getMap\"),\" function, which returns the full state of the game (we don't want to be making a separate call for every coordinate!)\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"// assembly/main.ts\\n...\\nexport function getMap(): string[] {\\n  let num_rows = 10;\\n  let num_cols = 10;\\n  let total_cells = num_rows * num_cols;\\n  var arrResult:string[] = new Array(total_cells);\\n  let i = 0;\\n  for (let row=0; row<num_rows; row++) {\\n    for (let col=0; col<num_cols; col++) {\\n      let cellEntry = globalStorage.getItem(near.str(row) + \\\",\\\" + near.str(col));\\n      arrResult[i] = cellEntry;\\n      i++;\\n    }\\n  }\\n  return arrResult;\\n}\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"step-3----write-a-couple-of-tests-for-the-contract\"}},\"Step 3 -- Write a couple of tests for the contract\"),React.createElement(MDXTag,{name:\"p\",components:components},\"We can test the contract right away by writing some code in JavaScript. Open \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"src/main.js\"),\" and modify it to call the functions that we just wrote.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"First let's call \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"getMap\"),\". It's a function which does not modify the state, so we can call it through a \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"callViewFunction\"),\" interface. Replace the contents of \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"main.js\"),\" with the following, and then try running it by clicking \\\"test\\\".\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"// src/main.js\\n...\\n\\nfunction sleep(time) {\\n  return new Promise(function (resolve, reject) {\\n    setTimeout(resolve, time);\\n  });\\n}\\n\\ndescribe(\\\"NearPlace\\\", function() {\\n  let contract;\\n  let accountId;\\n\\n  // Contains all the steps that are necessary to\\n  //    establish a connection with a dev instance\\n  //    of the blockchain.\\n  beforeAll(async function() {\\n      const config = await nearlib.dev.getConfig();\\n      near = await nearlib.dev.connect();\\n      accountId = nearlib.dev.myAccountId;\\n      const url = new URL(window.location.href);\\n      config.contractName = url.searchParams.get(\\\"contractName\\\");\\n      console.log(\\\"nearConfig\\\", config);\\n      await sleep(1000);\\n      contract = await near.loadContract(config.contractName, {\\n        // NOTE: This configuration only needed while NEAR is still in development\\n        viewMethods: [\\\"getMap\\\"],\\n        changeMethods: [\\\"setCoords\\\"],\\n        sender: accountId\\n      });\\n  });\\n\\n  describe(\\\"getMap\\\", function() {\\n    it(\\\"can get the board state\\\", async function() {\\n      const viewResult = await contract.getMap({});\\n      expect(viewResult.length).toBe(100); // board is 10 by 10\\n    });\\n  });\\n});\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"The getMap test simply invokes the getMap function of the contract. Note the syntax: \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"contract.getMap(args)\"),\", where \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"args\"),\" is a JavaScript object containing the arguments. In this case, our function has no parameters, so we are passing an empty object.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Second, let's try to modify the game state! Add this to \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"main.js\"),\", and run it by clicking \\\"Test\\\".\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"  // src/main.js\\n  ...\\n  describe(\\\"setCoords\\\", function() {\\n    it(\\\"modifies the board state\\\", async function() {\\n      const setResult = await contract.setCoords({\\n        coords: \\\"0,0\\\",\\n        value: \\\"111111\\\"});\\n      console.log(setResult);\\n      const viewResult = await contract.getMap({});\\n      expect(viewResult.length).toBe(100); // board is 10 by 10\\n      // entry 0,0 should be 111111!\\n      expect(viewResult[0]).toBe(\\\"111111\\\")\\n    });\\n  });\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"step-4----make-a-simple-ui\"}},\"Step 4 -- Make a simple UI\"),React.createElement(MDXTag,{name:\"p\",components:components},\"All the blockchain work is done! Let's make a very simple JavaScript user interface (UI).\"),React.createElement(MDXTag,{name:\"p\",components:components},\"We need a few more tweaks to \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"main.js\"),\" to include some UI JavaScript - add the following to the file:\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"// src/main.js\\n...\\n// Loads nearlib and this contract into nearplace scope.\\nnearplace = {};\\nlet initPromise;\\ninitContract = function () {\\n  if (nearplace.contract) {\\n    return Promise.resolve();\\n  }\\n  if (!initPromise) {\\n    initPromise = doInitContract();\\n  }\\n  return initPromise;\\n}\\n\\nasync function doInitContract() {\\n  const config = await nearlib.dev.getConfig();\\n  console.log(\\\"nearConfig\\\", config);\\n  nearplace.near = await nearlib.dev.connect();\\n  nearplace.contract = await nearplace.near.loadContract(config.contractName, {\\n    viewMethods: [\\\"getMap\\\"],\\n    changeMethods: [\\\"setCoords\\\"],\\n    sender: nearlib.dev.myAccountId\\n  });\\n\\n  loadBoardAndDraw();\\n  nearplace.timedOut = false;\\n  const timeOutPeriod = 10 * 60 * 1000; // 10 min\\n  setInterval(() => { nearplace.timedOut = true; }, timeOutPeriod);\\n}\\n\\nfunction sleep(time) {\\n  return new Promise(function (resolve, reject) {\\n    setTimeout(resolve, time);\\n  });\\n}\\n\\ninitContract().catch(console.error);\\n\\nfunction loadBoardAndDraw() {\\n  if (nearplace.timedOut) {\\n    console.log(\\\"Please reload to continue\\\");\\n    return;\\n  }\\n  const board = getBoard().then((fullMap) => {\\n    console.log(fullMap);\\n    var canvas = document.getElementById(\\\"myCanvas\\\");\\n    var ctx = canvas.getContext(\\\"2d\\\");\\n    var i = 0;\\n    for (var x = 0; x < 10; x++) {\\n      for (var y = 0; y < 10; y++) {\\n        var color = fullMap[i];\\n        if (!color) {\\n          color = \\\"000000\\\";\\n        }\\n        ctx.fillStyle = \\\"#\\\" + color;\\n        ctx.fillRect(x*10, y*10, 10, 10);\\n        i++;\\n      }\\n    }\\n  });\\n}\\n\\nfunction getMousepos(canvas, evt){\\n  var rect = canvas.getBoundingClientRect();\\n  return {\\n    x: evt.clientX - rect.left,\\n    y: evt.clientY - rect.top\\n  };\\n}\\n\\nfunction myCanvasClick(e) {\\n  const canvas = document.getElementById(\\\"myCanvas\\\");\\n  const ctx = canvas.getContext(\\\"2d\\\");\\n  const position = getMousepos(canvas, e);\\n  const x = Math.floor(position.x/10);\\n  const y = Math.floor(position.y/10);\\n\\n  const coords = x + \\\",\\\" + y;\\n  const rgb = document.getElementById('picker').value;\\n  ctx.fillStyle = \\\"#\\\" + rgb;\\n  ctx.fillRect(x*10, y*10, 10, 10);\\n\\n  var readMethodName = \\\"setCoords\\\";\\n  args = { coords: coords, value: rgb };\\n  nearplace.contract.setCoords(args);\\n}\\n\\nasync function getBoard() {\\n  const result = await nearplace.contract.getMap({})\\n  console.log(result);\\n  return result;\\n}\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"We are using the \\\"jscolor picker\\\" to pick a color. To implement this:\"),React.createElement(MDXTag,{name:\"ol\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Download the jscolor .zip file using the instructions at \",React.createElement(MDXTag,{name:\"a\",components:components,parentName:\"li\",props:{\"href\":\"http://jscolor.com/\"}},\"http://jscolor.com/\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},\"Unzip the file and copy it into the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"li\"},\"src/\"),\" directory in the Studio window (you can drag and drop it)\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Finally, replace the content of the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"main.html\"),\" file with the following:\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{}},\"// src/main.html\\n\\n<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n  <meta charset=\\\"utf-8\\\">\\n  <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\">\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\\n  <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->\\n  <script src=\\\"https://cdn.jsdelivr.net/npm/nearlib@0.1.1/dist/nearlib.js\\\"></script>\\n  <script src=\\\"./main.js\\\"></script>\\n  <script src=\\\"jscolor.js\\\"></script>\\n  <span id=\\\"container\\\"></span>\\n  <title>NEAR PLACE</title>\\n  <link rel=\\\"stylesheet\\\" href=\\\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\\\">\\n  <link rel=\\\"stylesheet\\\" href=\\\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\\\">\\n  <style>\\n    .glyphicon-refresh-animate {\\n            -animation: spin .7s infinite linear;\\n            -webkit-animation: spin2 .7s infinite linear;\\n    }\\n\\n    @-webkit-keyframes spin2 {\\n            from { -webkit-transform: rotate(0deg);}\\n            to { -webkit-transform: rotate(360deg);}\\n    }\\n\\n    @keyframes spin {\\n            from { transform: scale(1) rotate(0deg);}\\n            to { transform: scale(1) rotate(360deg);}\\n    }\\n  </style>\\n  </head>\\n  <body style=\\\"padding-top: 70px; padding-bottom: 30px;\\\">\\n    <!-- Fixed navbar -->\\n    <nav class=\\\"navbar navbar-inverse navbar-fixed-top\\\">\\n        <div class=\\\"container\\\">\\n        <div class=\\\"navbar-header\\\">\\n            <button type=\\\"button\\\" class=\\\"navbar-toggle collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbar\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"navbar\\\">\\n            <span class=\\\"sr-only\\\">Toggle navigation</span>\\n            <span class=\\\"icon-bar\\\"></span>\\n            <span class=\\\"icon-bar\\\"></span>\\n            <span class=\\\"icon-bar\\\"></span>\\n            </button>\\n            <a class=\\\"navbar-brand\\\" href=\\\"#\\\">NEAR PLACE</a>\\n        </div>\\n        <div id=\\\"navbar\\\" class=\\\"navbar-collapse collapse\\\">\\n            <ul class=\\\"nav navbar-nav\\\">\\n            <li class=\\\"active\\\"><a href=\\\"#\\\">Home</a></li>\\n            <li><a href=\\\"#about\\\">About</a></li>\\n            <li><a href=\\\"#contact\\\">Contact</a></li>\\n            </ul>\\n        </div><!--/.nav-collapse -->\\n        </div>\\n    </nav>\\n\\n    <div class=\\\"container\\\" role=\\\"main\\\">\\n        <div class=\\\"jumbotron\\\">\\n            <h1>PLACE</h1>\\n            <p>Imagine drawing <b>forever</b> on the blockchain.</p>\\n          </div>\\n        <div align=\\\"center\\\">\\n        <canvas\\n          id=\\\"myCanvas\\\"\\n          class=\\\"drawingboard\\\",\\n          width=\\\"100\\\"\\n          height=\\\"100\\\"\\n          onclick=\\\"myCanvasClick(event);\\\"\\n          style=\\\"border:1px solid #000000;\\\"></canvas>\\n        </canvas>\\n        </div>\\n        <div align=\\\"center\\\">\\n        <input class=\\\"jscolor\\\" id=\\\"picker\\\" value=\\\"ab2567\\\">\\n    </div>\\n  </body>\\n</html>\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"The game should now work and show the UI in NEAR Studio. To run the UI, use the \\\"Run\\\" button.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Happy gaming!\"));}}]);return MDXContent;}(React.Component);export{MDXContent as default};MDXContent.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"MDXContent\"};",{"version":3,"sources":["/Users/eriktrautman/Documents/docs/src/tutorials/multiplayergame.mdx"],"names":["React","MDXTag","layoutProps","MDXContent","props","layout","components","Component"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"writing-a-multiplayer-game-with-shared-world-state\"}}>{`Writing a multiplayer game with shared world state.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`A multiplayer game is typically characterized by taking place within a single world that all players can affect. Let's build one!`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This is commonly implemented by setting up a coordinate system which represents locations within the world.  A simple key-value mapping stores the state of the world at a particular coordinate.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In this tutorial, we will write a very simple game with a shared world state. The world is represented as a square playing field and the only property that is available at each location is its 'color'. Some of you may recognize this as \"place\", which made its way around the Internet a while ago.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`See and play with a working solution here: `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://studio.nearprotocol.com/?f=fnpeopb37&quickstart\"}}>{`https://studio.nearprotocol.com/?f=fnpeopb37&quickstart`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"step-1----start-a-new-fiddle-in-nearstudio\"}}>{`Step 1 -- Start a new fiddle in NEARstudio`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Go to `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://studio.nearprotocol.com/\"}}>{`https://studio.nearprotocol.com/`}</MDXTag>{` and start a new project (fiddle) by selecting \"Token Smart Contract in AssemblyScript\" and click \"Create\".`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"public/screenshots/multiplayergame/studio_choose_contract_modal.png\",\"alt\":\"Contract selection modal\",\"title\":\"Contract selection modal\"}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This sample project has a token smart contract (i.e. code that runs on blockchain) and also some JavaScript tests that invoke smart contract functions.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can try running these tests right away to see the code interacting with the blockchain by clicking \"Test\". It should open a new window and show the test results using the standard Jasmine browser UI.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Also note that `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`we are not going to keep any of the code from this template`}</MDXTag>{`, it's just there as a starting point.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"step-2---write-a-smart-contract\"}}>{`Step 2 - Write a smart contract`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In this simple game, we need to create only two actions:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`1. View the world state: \\`getCoords\\`\n2. Make changes to the state at particular coordinates: \\`setCoords\\`\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`In a more complex game with a large world, it is optimal to avoid returning the state of the entire world at once.  Because our game is small and simple, we don't have to worry about this.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Navigate to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`assembly/main.ts`}</MDXTag>{`, and:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Delete everything that is there.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Implement the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`setCoords`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`getCoords`}</MDXTag>{` functions using the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`globalStorage`}</MDXTag>{` object's `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`setItem`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`getItem`}</MDXTag>{` functions:`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// assembly/main.ts\n\nexport function setCoords(coords: string, value: string): void {\n  globalStorage.setItem(coords, value);\n}\n\nexport function getCoords(coords: string): string {\n  return globalStorage.getItem(coords);\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`We also need a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getMap`}</MDXTag>{` function, which returns the full state of the game (we don't want to be making a separate call for every coordinate!)`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// assembly/main.ts\n...\nexport function getMap(): string[] {\n  let num_rows = 10;\n  let num_cols = 10;\n  let total_cells = num_rows * num_cols;\n  var arrResult:string[] = new Array(total_cells);\n  let i = 0;\n  for (let row=0; row<num_rows; row++) {\n    for (let col=0; col<num_cols; col++) {\n      let cellEntry = globalStorage.getItem(near.str(row) + \",\" + near.str(col));\n      arrResult[i] = cellEntry;\n      i++;\n    }\n  }\n  return arrResult;\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"step-3----write-a-couple-of-tests-for-the-contract\"}}>{`Step 3 -- Write a couple of tests for the contract`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can test the contract right away by writing some code in JavaScript. Open `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`src/main.js`}</MDXTag>{` and modify it to call the functions that we just wrote.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`First let's call `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getMap`}</MDXTag>{`. It's a function which does not modify the state, so we can call it through a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`callViewFunction`}</MDXTag>{` interface. Replace the contents of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`main.js`}</MDXTag>{` with the following, and then try running it by clicking \"test\".`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// src/main.js\n...\n\nfunction sleep(time) {\n  return new Promise(function (resolve, reject) {\n    setTimeout(resolve, time);\n  });\n}\n\ndescribe(\"NearPlace\", function() {\n  let contract;\n  let accountId;\n\n  // Contains all the steps that are necessary to\n  //    establish a connection with a dev instance\n  //    of the blockchain.\n  beforeAll(async function() {\n      const config = await nearlib.dev.getConfig();\n      near = await nearlib.dev.connect();\n      accountId = nearlib.dev.myAccountId;\n      const url = new URL(window.location.href);\n      config.contractName = url.searchParams.get(\"contractName\");\n      console.log(\"nearConfig\", config);\n      await sleep(1000);\n      contract = await near.loadContract(config.contractName, {\n        // NOTE: This configuration only needed while NEAR is still in development\n        viewMethods: [\"getMap\"],\n        changeMethods: [\"setCoords\"],\n        sender: accountId\n      });\n  });\n\n  describe(\"getMap\", function() {\n    it(\"can get the board state\", async function() {\n      const viewResult = await contract.getMap({});\n      expect(viewResult.length).toBe(100); // board is 10 by 10\n    });\n  });\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The getMap test simply invokes the getMap function of the contract. Note the syntax: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`contract.getMap(args)`}</MDXTag>{`, where `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`args`}</MDXTag>{` is a JavaScript object containing the arguments. In this case, our function has no parameters, so we are passing an empty object.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Second, let's try to modify the game state! Add this to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`main.js`}</MDXTag>{`, and run it by clicking \"Test\".`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  // src/main.js\n  ...\n  describe(\"setCoords\", function() {\n    it(\"modifies the board state\", async function() {\n      const setResult = await contract.setCoords({\n        coords: \"0,0\",\n        value: \"111111\"});\n      console.log(setResult);\n      const viewResult = await contract.getMap({});\n      expect(viewResult.length).toBe(100); // board is 10 by 10\n      // entry 0,0 should be 111111!\n      expect(viewResult[0]).toBe(\"111111\")\n    });\n  });\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"step-4----make-a-simple-ui\"}}>{`Step 4 -- Make a simple UI`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`All the blockchain work is done! Let's make a very simple JavaScript user interface (UI).`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We need a few more tweaks to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`main.js`}</MDXTag>{` to include some UI JavaScript - add the following to the file:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// src/main.js\n...\n// Loads nearlib and this contract into nearplace scope.\nnearplace = {};\nlet initPromise;\ninitContract = function () {\n  if (nearplace.contract) {\n    return Promise.resolve();\n  }\n  if (!initPromise) {\n    initPromise = doInitContract();\n  }\n  return initPromise;\n}\n\nasync function doInitContract() {\n  const config = await nearlib.dev.getConfig();\n  console.log(\"nearConfig\", config);\n  nearplace.near = await nearlib.dev.connect();\n  nearplace.contract = await nearplace.near.loadContract(config.contractName, {\n    viewMethods: [\"getMap\"],\n    changeMethods: [\"setCoords\"],\n    sender: nearlib.dev.myAccountId\n  });\n\n  loadBoardAndDraw();\n  nearplace.timedOut = false;\n  const timeOutPeriod = 10 * 60 * 1000; // 10 min\n  setInterval(() => { nearplace.timedOut = true; }, timeOutPeriod);\n}\n\nfunction sleep(time) {\n  return new Promise(function (resolve, reject) {\n    setTimeout(resolve, time);\n  });\n}\n\ninitContract().catch(console.error);\n\nfunction loadBoardAndDraw() {\n  if (nearplace.timedOut) {\n    console.log(\"Please reload to continue\");\n    return;\n  }\n  const board = getBoard().then((fullMap) => {\n    console.log(fullMap);\n    var canvas = document.getElementById(\"myCanvas\");\n    var ctx = canvas.getContext(\"2d\");\n    var i = 0;\n    for (var x = 0; x < 10; x++) {\n      for (var y = 0; y < 10; y++) {\n        var color = fullMap[i];\n        if (!color) {\n          color = \"000000\";\n        }\n        ctx.fillStyle = \"#\" + color;\n        ctx.fillRect(x*10, y*10, 10, 10);\n        i++;\n      }\n    }\n  });\n}\n\nfunction getMousepos(canvas, evt){\n  var rect = canvas.getBoundingClientRect();\n  return {\n    x: evt.clientX - rect.left,\n    y: evt.clientY - rect.top\n  };\n}\n\nfunction myCanvasClick(e) {\n  const canvas = document.getElementById(\"myCanvas\");\n  const ctx = canvas.getContext(\"2d\");\n  const position = getMousepos(canvas, e);\n  const x = Math.floor(position.x/10);\n  const y = Math.floor(position.y/10);\n\n  const coords = x + \",\" + y;\n  const rgb = document.getElementById('picker').value;\n  ctx.fillStyle = \"#\" + rgb;\n  ctx.fillRect(x*10, y*10, 10, 10);\n\n  var readMethodName = \"setCoords\";\n  args = { coords: coords, value: rgb };\n  nearplace.contract.setCoords(args);\n}\n\nasync function getBoard() {\n  const result = await nearplace.contract.getMap({})\n  console.log(result);\n  return result;\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`We are using the \"jscolor picker\" to pick a color. To implement this:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Download the jscolor .zip file using the instructions at `}<MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"http://jscolor.com/\"}}>{`http://jscolor.com/`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Unzip the file and copy it into the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`src/`}</MDXTag>{` directory in the Studio window (you can drag and drop it)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Finally, replace the content of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`main.html`}</MDXTag>{` file with the following:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// src/main.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->\n  <script src=\"https://cdn.jsdelivr.net/npm/nearlib@0.1.1/dist/nearlib.js\"></script>\n  <script src=\"./main.js\"></script>\n  <script src=\"jscolor.js\"></script>\n  <span id=\"container\"></span>\n  <title>NEAR PLACE</title>\n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\">\n  <style>\n    .glyphicon-refresh-animate {\n            -animation: spin .7s infinite linear;\n            -webkit-animation: spin2 .7s infinite linear;\n    }\n\n    @-webkit-keyframes spin2 {\n            from { -webkit-transform: rotate(0deg);}\n            to { -webkit-transform: rotate(360deg);}\n    }\n\n    @keyframes spin {\n            from { transform: scale(1) rotate(0deg);}\n            to { transform: scale(1) rotate(360deg);}\n    }\n  </style>\n  </head>\n  <body style=\"padding-top: 70px; padding-bottom: 30px;\">\n    <!-- Fixed navbar -->\n    <nav class=\"navbar navbar-inverse navbar-fixed-top\">\n        <div class=\"container\">\n        <div class=\"navbar-header\">\n            <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">\n            <span class=\"sr-only\">Toggle navigation</span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n            </button>\n            <a class=\"navbar-brand\" href=\"#\">NEAR PLACE</a>\n        </div>\n        <div id=\"navbar\" class=\"navbar-collapse collapse\">\n            <ul class=\"nav navbar-nav\">\n            <li class=\"active\"><a href=\"#\">Home</a></li>\n            <li><a href=\"#about\">About</a></li>\n            <li><a href=\"#contact\">Contact</a></li>\n            </ul>\n        </div><!--/.nav-collapse -->\n        </div>\n    </nav>\n\n    <div class=\"container\" role=\"main\">\n        <div class=\"jumbotron\">\n            <h1>PLACE</h1>\n            <p>Imagine drawing <b>forever</b> on the blockchain.</p>\n          </div>\n        <div align=\"center\">\n        <canvas\n          id=\"myCanvas\"\n          class=\"drawingboard\",\n          width=\"100\"\n          height=\"100\"\n          onclick=\"myCanvasClick(event);\"\n          style=\"border:1px solid #000000;\"></canvas>\n        </canvas>\n        </div>\n        <div align=\"center\">\n        <input class=\"jscolor\" id=\"picker\" value=\"ab2567\">\n    </div>\n  </body>\n</html>\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The game should now work and show the UI in NEAR Studio. To run the UI, use the \"Run\" button.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Happy gaming!`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "]}]}