{"version":3,"sources":["webpack:///./src/tutorials/multiplayergame.mdx"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName","href"],"mappings":"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","file":"static/js/src-tutorials-multiplayergame.d3801f94.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"writing-a-multiplayer-game-with-shared-world-state\"}}>{`Writing a multiplayer game with shared world state.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Typically a multiplayer game is characterized by having a shared world which all players can affect. It's also very common to have a coordinate system for a shared world. A very simple implementation of such a shared world is a simple key value mapping from coordinates to the state of the world at given coordinates.\nIn this tutorial we will write a very simple game with a shared world state. The only property that each world location supports is the color, and the world itself is a square playfield. Some of you may recognize this as \"place\", which made its way aroudn the Internet a while ago. `}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"step-1----start-a-new-fiddle-in-nearstudio\"}}>{`Step 1 -- Start a new fiddle in NEARstudio`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Go to `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://studio.nearprotocol.com/\"}}>{`https://studio.nearprotocol.com/`}</MDXTag>{` and start a new project (fiddle) by selecting Token Smart Contract in AssemblyScript + Nearlib. You can try running this application right away to see the code interacting with the blockchain!`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"step-2---write-a-smart-contract\"}}>{`Step 2 - Write a smart contract`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In this simple game, we need only two actions: view the world state, and make changes to the state at particular coordinates.\nIn a more complex game with a large world, it may be important to not return the state of the whole world, but our game is small and simple enough that we don't have to worry about this.\nNavigate to assembly/main.ts, and implement the following functions: setCoords and getCoords to operate on a single coordinate in the world. You will need to use globalStorage setItem and getItem functions. `}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`export function setCoords(coords: string, value: string): void {\n  globalStorage.setItem(coords, value);\n}\n\nexport function getCoords(coords: string): string {\n  return globalStorage.getItem(coords);\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`We also need a getMap function, which returns the full state of the game (we don't want to be making a separate call for every coordinate!)`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`export function getMap(): string {\n  let num_rows = 10;\n  let num_cols = 10;\n  let result = \"\".toString();\n  for (let row=0; row<num_rows; row++) {\n    for (let col=0; col<num_cols; col++) {\n      let color = globalStorage.getItem(near.str(row) + \",\" + near.str(col));\n      if (color == null) {\n        color = \"000000\";\n      }\n      result = result.concat(color);\n      if (col < num_cols - 1) {\n        result = result.concat(\",\".toString());\n      }\n    }\n    if (row < num_rows - 1) {\n      result = result.concat(\"\\n\".toString());\n    }\n  }\n  return result as string;\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`A full solution that works is here `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://studio.nearprotocol.com/?f=dc4kshvwr\"}}>{`https://studio.nearprotocol.com/?f=dc4kshvwr`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"step-2----write-a-couple-of-tests-for-the-contract\"}}>{`Step 2 -- Write a couple of tests for the contract`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can test the contract right away by writing some code in javascript. Open main.js and modify it to call the functions that we just wrote.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`First let's call getMap. It's a function which does not modify the state, so we can call it through a callViewFunction interface.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`async function getBoard() {\n  const studioConfig = await studio.getConfig();\n  const result = await nearjs.callViewFunction(\n    myAccountId, // we are using your default nearstudio account\n    studioConfig.contractName, // contract name associated with this fiddle\n    \"getMap\", // method name\n    {}); // parameters - no parameters here\n  return result;\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Call this function from runTest() and try running it! You should be able to get the game state now!`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Second, let's try to modify the game state! Add this to runTest() and try running it!`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`async function runTest() {\n  ...\n  const setCoordsArgs = {\n    \"coords\": \"2,1\",\n    \"value\": \"40AB3C\" \n  };\n  await nearjs.scheduleFunctionCall(\n    0, myAccountId,\n    studioConfig.contractName,\n    \"setCoords\",\n    setCoordsArgs);\n  ...\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"step-3----make-a-simple-ui\"}}>{`Step 3 -- Make a simple UI`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`At this point, we are making a UI. All the blockchain work is done! This example uses a very simple plain javascript UI.\nWe need a few more tweaks to main.js to include some UI javascript - add the following to main.js.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`function loadBoardAndDraw() { \n  const board = getBoard().then((fullMap) => {\n  var splitByRow = fullMap.split(\"\\n\");\n    var canvas = document.getElementById(\"myCanvas\");\n    var ctx = canvas.getContext(\"2d\");\n    for (var x = 0; x < splitByRow.length; x++) {\n      var splitByCol = splitByRow[x].split(\",\");\n      for (var y = 0; y < splitByCol.length; y++) {\n        ctx.fillStyle = \"#\" + splitByCol[y];\n        ctx.fillRect(x*10, y*10, 10, 10);\n      }\n    }\n  });\n}\n\nfunction getMousepos(canvas, evt){\n  var rect = canvas.getBoundingClientRect();\n  return {\n    x: evt.clientX - rect.left,\n    y: evt.clientY - rect.top\n  };\n}\n\nfunction myCanvasClick(e) {\n  const canvas = document.getElementById(\"myCanvas\");\n  const ctx = canvas.getContext(\"2d\");\n  const position = getMousepos(canvas, e);\n  const x = Math.floor(position.x/10);\n  const y = Math.floor(position.y/10);\n\n  const coords = x + \",\" + y;\n  const rgb = document.getElementById('picker').value;\n  ctx.fillStyle = \"#\" + rgb;\n  ctx.fillRect(x*10, y*10, 10, 10);\n\n\n  var readMethodName = \"setCoords\";\n  args = { coords: coords, value: rgb };\n  nearjs.scheduleFunctionCall(\n    0, myAccountId,\n    studioConfig.contractName, \"setCoords\", args);\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`We are using a jscolor picker to pick a color. Download `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://jscolor.com/\"}}>{`http://jscolor.com/`}</MDXTag>{`, and add jscolor.js to the fiddle under src (or you can copy the file from the working nearplace example).`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Replace the content of the main.html file with the following`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->\n  <script src=\"./nearlib.js\"></script>\n  <script src=\"./near.js\"></script>\n  <script src=\"./main.js\"></script>\n  <script src=\"jscolor.js\"></script>\n  <span id=\"container\"></span>\n  <title>NEAR PLACE</title>\n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\">\n  <style>\n    .glyphicon-refresh-animate {\n            -animation: spin .7s infinite linear;\n            -webkit-animation: spin2 .7s infinite linear;\n    }\n\n    @-webkit-keyframes spin2 {\n            from { -webkit-transform: rotate(0deg);}\n            to { -webkit-transform: rotate(360deg);}\n    }\n\n    @keyframes spin {\n            from { transform: scale(1) rotate(0deg);}\n            to { transform: scale(1) rotate(360deg);}\n    }\n  </style>\n  </head>\n  <body style=\"padding-top: 70px; padding-bottom: 30px;\">\n    <!-- Fixed navbar -->\n    <nav class=\"navbar navbar-inverse navbar-fixed-top\">\n        <div class=\"container\">\n        <div class=\"navbar-header\">\n            <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">\n            <span class=\"sr-only\">Toggle navigation</span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n            </button>\n            <a class=\"navbar-brand\" href=\"#\">NEAR PLACE</a>\n        </div>\n        <div id=\"navbar\" class=\"navbar-collapse collapse\">\n            <ul class=\"nav navbar-nav\">\n            <li class=\"active\"><a href=\"#\">Home</a></li>\n            <li><a href=\"#about\">About</a></li>\n            <li><a href=\"#contact\">Contact</a></li>\n            </ul>\n        </div><!--/.nav-collapse -->\n        </div>\n    </nav>\n\n    <div class=\"container\" role=\"main\">\n        <div class=\"jumbotron\">\n            <h1>PLACE</h1>\n            <p>Imagine drawing <b>forever</b> on the blockchain.</p>\n          </div>\n        <div align=\"center\">\n        <canvas\n          id=\"myCanvas\"\n          class=\"drawingboard\",\n          width=\"100\"\n          height=\"100\"\n          onclick=\"myCanvasClick(event);\"\n          style=\"border:1px solid #000000;\"></canvas>\n        </canvas>\n        </div>\n        <div align=\"center\">\n        <input class=\"jscolor\" id=\"picker\" value=\"ab2567\">\n    </div>\n    <script>\n        const baseUrl = \"https://studio.nearprotocol.com/contract-api/\";\n        // TODO: Pass contract name from studio somehow\n        const contractName = \"studio-BVvm8vx\";\n        loadBoardAndDraw();\n        setInterval(loadBoardAndDraw, 10000);\n    </script>\n  </body>\n</html>\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The game should now work and show the UI in nearstudio when you run it!`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}