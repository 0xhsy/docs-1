{"version":3,"sources":["webpack:///./src/basics/the_basics.mdx"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName","href"],"mappings":"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","file":"static/js/src-basics-the-basics.c2bd9981.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"the-basics\"}}>{`The Basics`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This section is intended to get you up to speed quickly on the syntax for writing smart contracts on NEAR.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If you want to jump in and use some existing templates, check out the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`Tutorials`}</MDXTag>{` section.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For these docs, we will generally assume that you have at least a basic understanding of programming languages.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"language\"}}>{`Language`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`NEAR contracts are written in `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://www.typescriptlang.org/\"}}>{`TypeScript`}</MDXTag>{`, a \"typed superset\" of JavaScript which can be compiled to plain JavaScript.  If you know JavaScript, you will have little problem working with TypeScript. If you have also worked with statically typed languages like C# or Java before, even better.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You don't even `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`technically`}</MDXTag>{` need to know JavaScript to learn TypeScript but you probably should. TypeScript is sort of like JavaScript with training wheels.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Why TypeScript?`}</MDXTag>{` TypeScript is the most developer-friendly language which compiles easily into Web Assembly (WASM), which is how we run code on each of the nodes which make up the network.  You could compile JavaScript the same way but it is quite inefficient.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Ultimately, this is the easiest way to write blockchain-based contracts that you'll find.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Note that only the contracts themselves are written in TypeScript -- the web pages which serve them will use the same HTML, CSS and JavaScript (possibly with `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://reactjs.org/\"}}>{`React`}</MDXTag>{`) that they always have.  Test files can be written using a normal JavaScript testing library like `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://jasmine.github.io/\"}}>{`Jasmine`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"a-5-minute-typescript-primer\"}}>{`A 5 Minute TypeScript Primer`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If you want a rapid primer on TypeScript, check out the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html\"}}>{`TypeScript in 5 minutes`}</MDXTag>{` tutorial from their documentation.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Your best ongoing reference is the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://www.typescriptlang.org/docs/handbook/basic-types.html\"}}>{`TypeScript Handbook`}</MDXTag>{`, which is cited often below.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Here are the rapid-fire basics:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`File extensions use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`.ts`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`You can write any valid JavaScript inside a TypeScript file.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Add \"type annotations\" (force the function argument to be a particular type) with a colon, eg. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`function foo(bar: string){...}`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`public`}</MDXTag>{` in a class constructor signature to automatically create properties of that name, eg. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`constructor(public foo: string, public bar: string){...}`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"key-concepts\"}}>{`Key Concepts`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"mental-models\"}}>{`Mental Models`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Writing a contract is just like writing a \"normal\" web application in most ways.  When in doubt, use the same mental models you already understand from other types of programming.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There are a few key concepts which are either different or worth highlighting specifically:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`The state of the contract, which you would normally store by writing values into a database, is instead stored on the blockchain using a simple key-value store called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`globalStorage`}</MDXTag>{` (which behaves similarly to web browser storage or any other key-value database).`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`Each operation has a certain cost associated with it.  More complex operations (including storage on chain) have a higher cost.  This cost is generally accounted for using a measure called \"gas\". This is currently not enabled in this version of the environment but will be included in future releases. Who pays for gas (and how) to run contract code is an important issue.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`Similarly to how an HTTP request runs on a web server, each function call to a smart contract gets executed in an entirely new stateless environment on the blockchain. Specifically, each node in the relevant shard (which typically contains around 100 nodes) spins up a virtual machine to execute that code locally. That virtual machine then executes the Web Assembly (WASM) that your TypeScript code has been compiled into. Once it is done, the node quits the VM.`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"the-basics-1\"}}>{`The Basics`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"contracts\"}}>{`Contracts`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`What is a \"contract?\" It's the container for all the variables, functions and state of the blockchain portion of your application.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Create a new contract:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`contract helloWorld {\n  // Code!\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can also access the context in which the contract is being executed by using the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`contractContext`}</MDXTag>{` object.  This gives you access to variables like the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`sender`}</MDXTag>{` or the contract's name via `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`contractName`}</MDXTag>{`.  See more about `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`contractContext`}</MDXTag>{` in `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/nearprotocol/near-runtime-ts/blob/master/apidoc/classes/_near_.contractcontext.md\"}}>{`autogenerated docs`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"state\"}}>{`State`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Like with web servers, function calls are stateless.  Any state that you want to save to the blockchain needs to be explicitly saved by interacting with the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`globalStorage`}</MDXTag>{` object.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This object provides an interface to the blockchain storage.  It is a standard key-value store where keys are strings and the values can be multiple types including `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`string`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`bytes`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`u64`}</MDXTag>{`.  Anything else needs to be first converted into these types.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`See `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/nearprotocol/near-runtime-ts/blob/master/apidoc/classes/_near_.globalstorage.md\"}}>{`the GlobalStorage github docs`}</MDXTag>{` for the full reference].`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"math\"}}>{`Math`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Mathematical operations in TypeScript are done in the same way as JavaScript.  See more in `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://www.tutorialspoint.com/typescript/typescript_arithmetic_operators_examples.htm\"}}>{`this article`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"arrays\"}}>{`Arrays`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Arrays are useful for storing multiple instances of state, sort of like a small database.  Again, arrays here are just `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://www.typescriptlang.org/docs/handbook/basic-types.html\"}}>{`normal TypeScript arrays`}</MDXTag>{` which act a lot like JavaScript arrays and have useful methods like `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`push`}</MDXTag>{` available.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// Creating a dynamic size array\nlet myArr = new Array<number>();\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`There is not currently syntactic sugar for array iterators like `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`map`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"iteration\"}}>{`Iteration`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Iteration follows the standard TypeScript format:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// set i to a type u64\nfor (let i: u64 = startIndex; i < someValue; i++) {\n  // do stuff\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"classes\"}}>{`Classes`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Classes are normal TypeScript classes and more information can be found in the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://www.typescriptlang.org/docs/handbook/classes.html\"}}>{`TypeScript Handbook`}</MDXTag>{`. We don't have structs, we have TypeScript classes instead.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You will generally want to define your classes in a different file and then import them:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// 1. define the class in the \\`assembly/model.ts\\` file\nexport class PostedMessage {\n  sender: string;\n  text: string;\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// 2. Import the class to your \\`assembly/main.ts\\` file\nimport { PostedMessage } from \"./model.near\";\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`There are no structs.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"function-declarations-and-return-values\"}}>{`Function Declarations and Return Values`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Function declarations follow standard TypeScript conventions, including the parameters they take, optional arguments and return values. See the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://www.typescriptlang.org/docs/handbook/functions.html\"}}>{`TypeScript Handbook`}</MDXTag>{` for more info.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"private-and-public-functions\"}}>{`Private and Public Functions`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Methods with names prepended by an underscore `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`_`}</MDXTag>{` are not callable from outside the contract. All others are.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`export function _myPrivateFunction(someInput: string): void {\n  // Code here!\n}\n\nexport function myPublicFunction(someInput: string): void {\n  // Code here!\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"view-and-change-functions\"}}>{`View and Change functions`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There are two types of functions that can interact with the blockchain -- \"view\" functions and \"change\" functions.`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\"><MDXTag name=\"strong\" components={components} parentName=\"p\">{`View`}</MDXTag>{` functions do not actually change the state of the blockchain.  Imagine a function which, for instance, just checks the balance of a particular account. Because no state is changed, these functions are lightweight and generally safe.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\"><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Change`}</MDXTag>{` functions modify state, for example by updating the balance someone holds in their account.  You need to be careful with these functions so they typically require explicit user authorization and are treated somewhat differently.`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"random-numbers\"}}>{`Random Numbers`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Randomness is challenging in blockchains because multiple nodes have to execute the same code and come to a consensus on the same result -- so all code has to be deterministic. Thus one should always be cautious when employing randomness to realize that it can be predicted in advance to some degree.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In this case, randomness is calculated using the hash of the block's seed. This provides a suitably random number for any low-stakes calculations but should be avoided for high-stakes ones like lottery payouts.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// returns a random 32-bit integer\nlet myRandomNumber = near.random32();\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`See more about functions exposed in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`near`}</MDXTag>{` namespace in `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/nearprotocol/near-runtime-ts/blob/master/apidoc/modules/_near_.near.md#random32\"}}>{`the Github docs`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"events\"}}>{`Events`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Sometimes you want your front end to automatically update if something changes on the back end. For example, if you have a messaging app that should update your screen when your friend sends you a message.  Currently, you will need to poll the chain to make this happen.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In the future, we may expose event emitters and listeners as syntactic sugar. If this is important to you, reach out `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://near.chat\"}}>{`on Discord`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"time\"}}>{`Time`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Time is one of the most difficult concepts in blockchains. In a singe-server-based environment like web developers are used to, the server's (or database's) clock is ok to rely on for creating timestamps.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Because the blockchain's state is determined by a consensus among many nodes and must be deterministic and adversary-resistant, there is no way to settle on a \"correct\" clock time while code is being run.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can pull timestamps from the client side (eg the JavaScript running on the user's computer) but that should come with all the usual warning about not trusting anything a client sends.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For less exact measures of time, the block index value is sufficient. This will look something like:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`// Note: Not implemented yet...\ncontractContext.blockIndex();\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Some solutions to the time issue include using \"trusted oracles\" but that's outside the scope of this doc.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"interfacing-with-your-front-end\"}}>{`Interfacing with your Front End`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`See the Client API section of the documentation for more information on how to interface with your app's front end.`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}