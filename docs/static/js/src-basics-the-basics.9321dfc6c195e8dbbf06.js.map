{"version":3,"sources":["webpack:///./src/basics/the_basics.mdx"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName","href"],"mappings":"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","file":"static/js/src-basics-the-basics.2c8b472a.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"the-basics\"}}>{`The Basics`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This section is intended to get you up to speed quickly on the syntax for writing smart contracts on NEAR.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If you want to jump in and use some existing templates, check out the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`Tutorials`}</MDXTag>{` section.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For these docs, we will generally assume that you have at least a basic understanding of programming languages.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"language\"}}>{`Language`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`NEAR contracts are written in `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://www.typescriptlang.org/\"}}>{`TypeScript`}</MDXTag>{`, a \"typed superset\" of JavaScript which can be compiled to plain JavaScript.  If you know JavaScript, you will have little problem working with TypeScript. If you have also worked with statically typed languages like C# or Java before, even better.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You don't even `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`technically`}</MDXTag>{` need to know JavaScript to learn TypeScript but you probably should. TypeScript is sort of like JavaScript with training wheels.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Why TypeScript?`}</MDXTag>{` TypeScript is the most developer-friendly language which compiles easily into Web Assembly (WASM), which is how we run code on each of the nodes which make up the network.  You could compile JavaScript the same way but it is quite inefficient.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Ultimately, this is the easiest way to write blockchain-based contracts that you'll find.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Note that only the contracts themselves are written in TypeScript -- the web pages which serve them will use the same HTML, CSS and JavaScript (possibly with `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://reactjs.org/\"}}>{`React`}</MDXTag>{`) that they always have.  Test files can be written using a normal JavaScript testing library like `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://jasmine.github.io/\"}}>{`Jasmine`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"a-5-minute-typescript-primer\"}}>{`A 5 Minute TypeScript Primer`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If you want a rapid primer on TypeScript, check out the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html\"}}>{`TypeScript in 5 minutes`}</MDXTag>{` tutorial from their documentation.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Here are the rapid-fire basics:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`File extensions use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`.ts`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`You can write any valid JavaScript inside a TypeScript file.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Add \"type annotations\" (force the function argument to be a particular type) with a colon, eg. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`function foo(bar: string){...}`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`public`}</MDXTag>{` in a class constructor signature to automatically create properties of that name, eg. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`constructor(public foo: string, public bar: string){...}`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"key-concepts\"}}>{`Key Concepts`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"mental-models\"}}>{`Mental Models`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Writing a contract is just like writing a \"normal\" web application in most ways.  When in doubt, use the same mental models you already understand from other types of programming.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There are a few key differences, though, conceptually:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`The state of the contract, which you would normally store by writing values into a database, is instead stored on the blockchain using “state variables”.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"interesting-concepts\"}}>{`Interesting Concepts`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`When code is run on the blockchain in a particular block, each node which makes up a particular shard has to quickly spin up a virtual machine to execute that code locally. That virtual machine executes the Web Assembly (WASM) that we compile your TypeScript code into. Once it is done, it quits the VM.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`To make an analogy to the web and JavaScript, it's as if each node had to fire up a new web browser instance, execute some JavaScript within that browser, and then quit out of it for every block.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"the-basics-1\"}}>{`The Basics`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"contracts\"}}>{`Contracts`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`What is a \"contract?\" It's the container for all the variables, functions and state of the blockchain portion of your application.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Create a new contract:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`contract helloWorld {\n  // Code!\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"state\"}}>{`State`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`TODO: How to store state in contracts.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"math\"}}>{`Math`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Math in TypeScript is the same as JavaScript.  See more in `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://www.tutorialspoint.com/typescript/typescript_arithmetic_operators_examples.htm\"}}>{`this article`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"arrays\"}}>{`Arrays`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Arrays are useful for storing multiple instances of state, sort of like a small database.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`TODO`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"structs\"}}>{`Structs`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`TODO`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"function-declarations\"}}>{`Function Declarations`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`TODO`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"working-with-structs-and-arrays\"}}>{`Working with Structs and Arrays`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`TODO`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"private-and-public-functions\"}}>{`Private and Public Functions`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Some functions shouldn't be callable from just anybody.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`TODO`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"function-return-values\"}}>{`Function Return Values`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`TODO`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"random-numbers\"}}>{`Random Numbers`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`TODO`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"events\"}}>{`Events`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`How do we communicate something that happened on the back-end to our application's front-end listeners?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`TODO`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"interfacing-with-your-front-end\"}}>{`Interfacing with your Front End`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`A quick overview of how to connect to our JS library, though the meat of this will be in the actual library docs section.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`TODO`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}