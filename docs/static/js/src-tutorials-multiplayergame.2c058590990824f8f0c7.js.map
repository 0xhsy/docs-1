{"version":3,"sources":["webpack:///./src/tutorials/multiplayergame.mdx"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName","href"],"mappings":"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","file":"static/js/src-tutorials-multiplayergame.e012d193.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"writing-a-multiplayer-game-with-shared-world-state\"}}>{`Writing a multiplayer game with shared world state.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`A multiplayer game is typically characterized by taking place within a single world that all players can affect. Let's build one!`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This is commonly implemented by setting up a coordinate system which represents locations within the world.  A simple key-value mapping stores the state of the world at a particular coordinate.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In this tutorial, we will write a very simple game with a shared world state. The world is represented as a square playing field and the only property that is available at each location is its 'color'. Some of you may recognize this as \"place\", which made its way around the Internet a while ago.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`See and play with a working solution here: `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://studio.nearprotocol.com/?f=fnpeopb37&quickstart\"}}>{`https://studio.nearprotocol.com/?f=fnpeopb37&quickstart`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"step-1----start-a-new-fiddle-in-nearstudio\"}}>{`Step 1 -- Start a new fiddle in NEARstudio`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Go to `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://studio.nearprotocol.com/\"}}>{`https://studio.nearprotocol.com/`}</MDXTag>{` and start a new project (fiddle) by selecting \"Token Smart Contract in AssemblyScript\" and click \"Create\".\nThis sample project has a token smart contract (i.e. code that runs on blockchain) and also some javascript tests that invoke smart contract functions.\nYou can try running these tests right away to see the code interacting with the blockchain:`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Click \"Test\". It should open a new window and show the test results using the standard Jasmine browser UI.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Also note that we are not going to keep any of the code from this template, it's just there as a starting point.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"step-2---write-a-smart-contract\"}}>{`Step 2 - Write a smart contract`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In this simple game, we need only two actions: view the world state, and make changes to the state at particular coordinates.\nIn a more complex game with a large world, it may be important to not return the state of the whole world, but our game is small and simple enough that we don't have to worry about this.\nNavigate to assembly/main.ts, and implement the following functions: setCoords and getCoords to operate on a single coordinate in the world. You will need to use globalStorage setItem and getItem functions.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`export function setCoords(coords: string, value: string): void {\n  globalStorage.setItem(coords, value);\n}\n\nexport function getCoords(coords: string): string {\n  return globalStorage.getItem(coords);\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`We also need a getMap function, which returns the full state of the game (we don't want to be making a separate call for every coordinate!)`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`export function getMap(): string[] {\n  let num_rows = 10;\n  let num_cols = 10;\n  let total_cells = num_rows * num_cols;\n  var arrResult:string[] = new Array(total_cells);\n  let i = 0;\n  for (let row=0; row<num_rows; row++) {\n    for (let col=0; col<num_cols; col++) {\n      let cellEntry = globalStorage.getItem(near.str(row) + \",\" + near.str(col));\n      arrResult[i] = cellEntry;\n      i++;\n    }\n  }\n  return arrResult;\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"step-3----write-a-couple-of-tests-for-the-contract\"}}>{`Step 3 -- Write a couple of tests for the contract`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We can test the contract right away by writing some code in javascript. Open main.js and modify it to call the functions that we just wrote.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`First let's call getMap. It's a function which does not modify the state, so we can call it through a callViewFunction interface. Replace the contents of main.js with the following, and then try running it by clicking \"test\".`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`describe(\"NearPlace\", function() {\n  beforeAll(async function() {\n    const config = await nearlib.dev.getConfig();\n    near = await nearlib.dev.connect();\n    alice = nearlib.dev.myAccountId;\n    contract = await near.loadContract(config.contractName, {\n      // NOTE: This configuration only needed while NEAR is still in development\n      viewMethods: [\"getMap\"],\n      changeMethods: [\"setCoords\"],\n      sender: nearlib.dev.myAccountId\n    });\n  });\n\n  describe(\"getMap\", function() {\n    it(\"can get the board state\", async function() {\n      const viewResult = await contract.getMap({});\n      expect(viewResult.length).toBe(100); // board is 10 by 10\n    });\n  });\n});\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`beforeAll function contains all the steps that are necessary to establish a connection with a dev instance of blockchain.\nThe getMap test invokes the getMap function of the contract. Note the syntax: contract.getMap(args), where args is an javascript object containing the arguments. In this case our function has no parameters, so we are passing an empty object.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Second, let's try to modify the game state! Add this to main.js, and run it by clicking \"Test\".`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  describe(\"setCoords\", function() {\n    it(\"modifies the board state\", async function() {\n      const setResult = await contract.setCoords({\n        coords: \"0,0\",\n        value: \"111111\"});\n      console.log(setResult);\n      const viewResult = await contract.getMap({});\n      expect(viewResult.length).toBe(100); // board is 10 by 10\n      // entry 0,0 should be 111111!\n      expect(viewResult[0].toBe(\"111111\"))\n    });\n  });\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"step-4----make-a-simple-ui\"}}>{`Step 4 -- Make a simple UI`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`At this point, we are making a UI. All the blockchain work is done! This example uses a very simple plain javascript UI.\nWe need a few more tweaks to main.js to include some UI javascript - add the following to main.js.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`function loadBoardAndDraw() {\n  if (nearplace.timedOut) {\n    console.log(\"Please reload to continue\");\n    return;\n  }\n  const board = getBoard().then((fullMap) => {\n    console.log(fullMap);\n    var canvas = document.getElementById(\"myCanvas\");\n    var ctx = canvas.getContext(\"2d\");\n    var i = 0;\n    for (var x = 0; x < 10; x++) {\n      for (var y = 0; y < 10; y++) {\n        var color = fullMap[i];\n        if (!color) {\n          color = \"000000\";\n        }\n        ctx.fillStyle = \"#\" + color;\n        ctx.fillRect(x*10, y*10, 10, 10);\n        i++;\n      }\n    }\n  });\n}\n\nfunction getMousepos(canvas, evt){\n  var rect = canvas.getBoundingClientRect();\n  return {\n    x: evt.clientX - rect.left,\n    y: evt.clientY - rect.top\n  };\n}\n\nfunction myCanvasClick(e) {\n  const canvas = document.getElementById(\"myCanvas\");\n  const ctx = canvas.getContext(\"2d\");\n  const position = getMousepos(canvas, e);\n  const x = Math.floor(position.x/10);\n  const y = Math.floor(position.y/10);\n\n  const coords = x + \",\" + y;\n  const rgb = document.getElementById('picker').value;\n  ctx.fillStyle = \"#\" + rgb;\n  ctx.fillRect(x*10, y*10, 10, 10);\n\n  var readMethodName = \"setCoords\";\n  args = { coords: coords, value: rgb };\n  nearplace.near.scheduleFunctionCall(\n    0,\n    nearlib.dev.myAccountId,\n    nearplace.studioConfig.contractName,\n    \"setCoords\",\n    args);\n}\n\nasync function getBoard() {\n  const result = await nearplace.near.callViewFunction(\n    nearlib.dev.myAccountId, // we are using your default nearstudio account\n    nearplace.studioConfig.contractName, // contract name associated with this fiddle\n    \"getMap\", // method name\n    {}); // parameters - no parameters here\n  return result;\n}\n\nfunction getCookie(name) {\n    var v = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|\\$)');\n    return v ? v[2] : null;\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`We are using a jscolor picker to pick a color. Download `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://jscolor.com/\"}}>{`http://jscolor.com/`}</MDXTag>{`, and add jscolor.js to the fiddle under src (or you can copy the file from the working nearplace example).`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Finally, replace the content of the main.html file with the following:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->\n  <script src=\"https://cdn.jsdelivr.net/gh/nearprotocol/nearcore/nearlib/dist/nearlib.js\"></script>\n  <script src=\"./main.js\"></script>\n  <script src=\"jscolor.js\"></script>\n  <span id=\"container\"></span>\n  <title>NEAR PLACE</title>\n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\">\n  <style>\n    .glyphicon-refresh-animate {\n            -animation: spin .7s infinite linear;\n            -webkit-animation: spin2 .7s infinite linear;\n    }\n\n    @-webkit-keyframes spin2 {\n            from { -webkit-transform: rotate(0deg);}\n            to { -webkit-transform: rotate(360deg);}\n    }\n\n    @keyframes spin {\n            from { transform: scale(1) rotate(0deg);}\n            to { transform: scale(1) rotate(360deg);}\n    }\n  </style>\n  </head>\n  <body style=\"padding-top: 70px; padding-bottom: 30px;\">\n    <!-- Fixed navbar -->\n    <nav class=\"navbar navbar-inverse navbar-fixed-top\">\n        <div class=\"container\">\n        <div class=\"navbar-header\">\n            <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">\n            <span class=\"sr-only\">Toggle navigation</span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n            </button>\n            <a class=\"navbar-brand\" href=\"#\">NEAR PLACE</a>\n        </div>\n        <div id=\"navbar\" class=\"navbar-collapse collapse\">\n            <ul class=\"nav navbar-nav\">\n            <li class=\"active\"><a href=\"#\">Home</a></li>\n            <li><a href=\"#about\">About</a></li>\n            <li><a href=\"#contact\">Contact</a></li>\n            </ul>\n        </div><!--/.nav-collapse -->\n        </div>\n    </nav>\n\n    <div class=\"container\" role=\"main\">\n        <div class=\"jumbotron\">\n            <h1>PLACE</h1>\n            <p>Imagine drawing <b>forever</b> on the blockchain.</p>\n          </div>\n        <div align=\"center\">\n        <canvas\n          id=\"myCanvas\"\n          class=\"drawingboard\",\n          width=\"100\"\n          height=\"100\"\n          onclick=\"myCanvasClick(event);\"\n          style=\"border:1px solid #000000;\"></canvas>\n        </canvas>\n        </div>\n        <div align=\"center\">\n        <input class=\"jscolor\" id=\"picker\" value=\"ab2567\">\n    </div>\n  </body>\n</html>\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The game should now work and show the UI in nearstudio. To run the UI, use the \"Run\" button.`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}